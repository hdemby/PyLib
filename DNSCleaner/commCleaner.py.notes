## an application to remove unneeded comment lines from DNS data files

## get all instances of ";;" comments in the current directory:
DIR="/etc/named/db_fwd"

##===========================================
## Classes
##===========================================

class removableComm:
    """a class representing a removable comment"""
    def __init__(self,text,loc=0):
        self.content=text
        self.loc=loc

    def getloc(self,llist):
        """return the location of this comment in a file"""
        self.loc = getlineloc(self.text,llist)
        return
        

class datafile:
    """ a class representing a ISC DNS zone data file"""
    def __init__(self,filename,directory)
        self.name=filename
        self.path=directory
        self.lines=[]
        self.rmcomments=[]

    def getlines(self):
        """get file content as list"""
        self.lines=open("%s/%s"%self.path.self.name,'r').readlines()

    def getcomments(self):
        """identify removable comment lines found in the file"""

##===========================================
## functions
##===========================================

def getComments(dir=DIR):
    """build a list of instances of ';;' occurances in the requested directory"""
    import os, sys
    # need to consider an cross platform solution
    try:
        os.system("grep ';;' %s/* > /tmp/comments_found.lst"%dir)
    except IOError:
        print "can't create list file in '/tmp/comments_found.lst', aborting!"
        sys.exit(1)
    try:
        commdata = open("/tmp/comments_found.lst",'r').readlines()  
    except:
        print "can't open list file in '/tmp/comments_found.lst', aborting!"
        sys.exit(1)
    return commdata

def typeistype(item1,item2):
    """true if type(item1)==type(item2)"""
    return type(item1)==type(item2)
#>>> item1={}; item2={}; assert(typeistype(item1,item2)==True)
#>>> item1={}; item2=""; assert(typeistype(item1,item2)==False)
#>>> item1=""; item2="";  assert(typeistype(item1,item2)==True)
#>>> item1=""; item2=0;  assert(typeistype(item1,item2)==False)
#>>> item1=""; item2=[];  assert(typeistype(item1,item2)==True),"'item1' should be a list"

def getkeydata(lline,dlm=":"):
    """return key with input as data"""
    assert typeistype(lline,"")
    if (dlm in lline):
        key,data=lline.split(dlm,1)
    else:
        raise AssertionError,"input requires '%s' as a delimiter to parse the data"%dlm
    return key,data
#>>> lline="file1:stuff to store"; assert(getkeydata(lline)==('file1','stuff to store'))
#>>> lline="file2:more stuff to store"; assert(getkeydata(lline)==('file2','more stuff to store'))
#>>> lline="file3:stop storing stuff"; assert(getkeydata(lline)==('file3','stop storing stuff'))
#>>> lline="file4|i'm not built right!"; assert(getkeydata(lline)==('file3','i\'m not built right!'))

def dictlistupdate(lline,dict):
    """add or update dict of list : {key:[]}"""
    assert (typeistype(dict,{})),"'dict' must be a dictionary"
    newdict = dict
    assert typeistype(lline,""),"'lline' must be a string"
    key,data = getkeydata(lline)
    data = "," + data
    try:
        newdict[key].append(data)
    except KeyError: 
        newdict[key]=[data]
    return newdict
#>>> datadict='file1:data1'; dict={}; dict=dictlistupdate(datadict,dict); assert(dict=={'file1':[',data1']})
#>>> datadict='file1:data2'; dict=dictlistupdate(datadict,dict); assert(dict=={'file1':[',data1',',data2']})
#>>> datadict='file2:data3'; dict=dictlistupdate(datadict,dict); assert(dict['file2']==[',data3'])
#>>> datadict='file1:data4'; dict=dictlistupdate(datadict,dict); assert(dict['file1']==[',data1',',data2',',data4'])

def getlineloc(lline,llist):
    """return location of line in a list"""
    loc=llist.index(lline)
    return loc

#>>> llist=['data1','data2','data4']; 
#>>> lline='data1'; assert(getlineloc(lline,llist)==0)
#>>> lline='data2'; assert(getlineloc(lline,llist)==1)
#>>> lline='data4'; assert(getlineloc(lline,llist)==2)
#>>> llist="""\
pcount			in	a	152.2.83.22
;c143-00		in	a	152.2.83.22	;00:04:AC:B7:9D:A1
c229-01			in	a	152.2.83.23	;00:20:AF:6D:52:6E
c223-01			in	a	152.2.83.24	;00:20:AF:6D:4E:B1
c380-01			in	a	152.2.83.25     ;00:06:29:A2:7E:97
howellpromise		in	a	152.2.83.26
cm224-01		in	a	152.2.83.27	;00:05:02:F0:B3:27
cm079-02		in	a	152.2.83.28	;00:05:02:16:99:31
;;cm049-01		in	a	152.2.83.29	;08:00:07:57:9D:8D
cmstest			in	a	152.2.83.29
;;bootcamp		in	a	152.2.83.30	;00:05:02:28:51:7E
vmhost2			in	a	152.2.83.31
flash			in	a	152.2.83.32
""".split("\n")
#>>> lline=";;cm049-01		in	a	152.2.83.29	;08:00:07:57:9D:8D"
#>>> assert(getlineloc(lline,llist)==8),"Failed to produce correct result"

def updatecommloc(loc,commline):
    "update location value in comment"
    comm=commline
    try:
        id,comm=commline.split(",",1)
    except:
        print "updatecommloc: 'commline' is not a list"
    return ",".join("%s"%s for s in [loc,comm])
#>>> loc=66;commline=',;;snap\t\t\tin\ta\t152.2.83.11\n'
#>>> assert(updatecommloc(loc,commline)=='66,;;snap\t\t\tin\ta\t152.2.83.11\n')
#>>> loc=66;commline=';;snap\t\t\tin\ta\t152.2.83.11\n'
#>>> assert(updatecommloc(loc,commline)=='66,;;snap\t\t\tin\ta\t152.2.83.11\n')

def getitemparms(comline):
    """return the location and comment"""
    return comline.split(",",1)
#>>> comline="83,;;   120     in      ptr     0.0.2.152.in-addr.arpa. ;RFC 1101 mapping";getitemparms(comline)[0]
#>>> comline="126,;;  120     in      ptr     0.78.154.192.in-addr.arpa."; getitemparms(comline)[0]           
#>>> comline="170,;;  120     in      ptr     0.79.154.192.in-addr.arpa." ; getitemparms(comline)[0]             

#>>> 


def filecommentrpt(file):
    """show the comment lines found in a zone file"""
    print file, "removable comment lines: ",len(filedict[file])
    print "".join("%s"%s for s in filedict[file])
    print
    return

if __name__=="__main__";
    """ test code beyond this point """
## create a list of filenames with ';;' comments included from the wkdata list:
commlist = getComments()

## convert list of lines into a dictionary:
filedict={}
for lline in commlist:
    try:
        filedict=dictlistupdate(lline,filedict)
    except AssertionError:
        print "rejected: ",lline
        continue

## for each file, update line with location:
for file in filedict.keys():
# # open the file:
    ffile=open(file,'r').readlines()
# # for each stored line:
    offset=0
    for n in range(len(filedict[file])):
        try:
            id,comment = filedict[file][n].split(",",1)
        except:
            print "problem",filedict[file][n]
# #     find indexed location of line in file
        loc=getlineloc(comment,ffile)
        loc=loc+offset
# #     update element as loc+","+data
        oldcommline=filedict[file][n]
        filedict[file][n]=updatecommloc(loc,oldcommline)
        offset=loc

file="/etc/named/db_fwd/jomc.unc.edu"
filecommentrpt(file)
file="/etc/named/db_fwd/lib_swap"
filecommentrpt(file)

file="/etc/named/db_fwd/unc.1"
filecommentrpt(file)

for file in filedict.keys():
    showfilecomments(file)

def cleanlst(filelst,rmlst):
    "return new list without submitted lines"
    rmlst=sorted([int(s) for s in rmlst])
    newlst=[]+filelst
    if rmlst[0]>rmlst[-1]:
#   # reverse location list order
        rmlst=rmlst[::-1]
    for each in rmlst:
#   # pop line in each location
        newlst.pop(each)
    return newlst

def getcomloclst(filecomlst):
    """return a list of comment locations for the file"""
    return [int(s.split(",",1)[0]) for s in filecomlst]

## get the location list for comments in the requested file
file="/etc/named/db_fwd/jomc.unc.edu"

removed=[]
for file in filedict
#    # load the file as a list
    filelst=open(file,'r').readlines()
#    # get a list of comment locations
    rmlst=getcomloclst(filedict[file])
    newlst=cleanlst(filelst,rmlst)
#    # write the filelist out to a newfile
#    # compare? (diff)
    assert(len(filelst)-len(newlst)==len(filedict[file])),"comment removal failed! Keep old file '%s'."%file
    removed+=filedict[file]
#    # write newfile to file, oldfile to file.bak
outfile=open("./commsremoved.lst",'w')
outfile.write("".join("%s"%s for s in removed))
outfile.close()


## create csv of file, comment data with location
## or create database of files, lines data
## schema:
##    files: id,file,path,tag
##    lines: id,fileid,line,location,tag













